- Override toString in HexagonTile
- Override equals() in HexagonTile
- Add a new Abstract IPlayer Class
- Add different listeners: ModelStatusListeners and PlayerActionListeners
    - Controller implements both interfaces
- Add two new interfaces: ModelStatus and PlayerAction
    - Model implements ModelStatus
    - View implements PlayerAction
    - Controller listens to both model and view
- Removed Controller Interface, changed the constructor for the controller
- Add a new method to player Interface
    - changed the name of a method: playROModel -> pertainHexagon
- Add a UserChoiceListener interface that listens to the user click on the panel
    - Add a new strategy specifically for HumanPlayer, implements UserChoiceListeners, that listens
      to the panel and tells the view what the user clicks
- Add a new keyListener in the panel that takes in 'enter' and 'p' of the keyboard
- Add user instructions and game status in the view so the user would know when it's their turn
- When its the user's turn, the view would notify the user that's its their turn and highlights the
  legals moves that the users can choose from.
- Wrote some tests for Controller
- Add a command line in main

NOTE: When an AIPlayer passes, the IPlayer communicates with the controller that it would like to
pass, then the controllers tells the view that the player wants to pass and there would be a popup
on the screen saying that the AIPlayer would like to pass.

NOTE: When the player has no legal moves, the model would keep track of that and automatically pass
the currentPlayer's turn, there would be a popup on the screen telling the player that they are
forced to pass the game.

In both cases, the actual user would have to click okay on the popup to continue the game